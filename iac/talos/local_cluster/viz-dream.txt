Python fast-api rest server

Description:
A Mesh contains some number of nodes and hubs
Pool of network clients (nodes)
Some can be designated as hubs
hubs can be linked together (like a graph)
application state stored in local lightweight on-disk db

data types
Mesh:
- id: uuid
- name: string
- nodes: list[Node]
- hubs: list[Node]

Node:
- id: uuid
- name: string
- addrs: list[string]
- data: string (json object)

Hub:
- id: uuid
- name: string
- spokes: list[Node]

Endpoints
mesh/<id>/node
- POST -> add a node to the pool for a given mesh
- DELETE -> remove a given node from the pool for a given mesh
mesh/<id>/hub
- POST -> set an existing node as a communication hub
- GET -> get the list of existing hubs for a given mesh
- DELETE -> remove the hub status from a node and break all links
mesh/<id>/link_to_hub
- POST -> conenct a node to a hub
mesh/<id>/unlink_from_hub
- POST -> disconenct a node from a hub
etc...


Order of operations:
- Create viz structure including directories and initial python / html setups [done]
- flesh out fast api based server to include all methods [done]
- add in tests for the methods (unit tests, light-weight) [done]
- take another pass on methods to ensure tests pass [done]
- flesh out html example to work with application [done]
- python server is able to serve html application, unit tests are passing [done]
- create documentation annotations for rest endpoints to make fast-api auto doc nice [done]
- update documentation / polish pass [done]
- add additional data layer to node models for future use (data: string (json object)) [done]
- add ability to connect hubs to each other to allow for more complex deployments [done]
    - Nodes connect to hubs like spokes [done]
    - Hubs can connect to other hubs to allow for more complex graphs [done]
    - all connections represent unicast udp connections for a wireguard mesh network [done]
    - update the web ui layer to include the new hub connection logic [done]
    - update the web ui layer to use a visual graph (like a directed graph) to represent the current selected mesh topology [done]
- take a pass on tests [done]
- add ability to load in json objects to nodes via ui [done but need verification]
    - this includes making sure tests exist for setting arbitrary payloads of varying sizes
- refactor ui logic into common library, posturing to add a cli layer that users or applications can interact with directly if they have access to the db files [done]
- add cli layer [done]
    - user can manage meshes [done]
    - user can add and remove nodes from a mesh [done]
    - user can link nodes [done]
    - user can create hubs and link them [done]
    - interactions are transactional, as in the process executes and then dies giving the shell back to the user [done]
    - should have useful error codes for failures [done]
- add common logging layer [done]
    - timestamps and where we are, posture for elk stack later on [done]
    - update CLI to use common logging [done]
    - update main web application to use common logging [done]
